/*
  backgrid-moment-cell
  http://github.com/wyuenho/backgrid

  Copyright (c) 2013 Jimmy Yuen Ho Wong and contributors
  Licensed under the MIT @license.
*/
!function(a,b){"function"==typeof define&&define.amd?
// AMD
define(["underscore","backgrid","moment"],b):"object"==typeof exports?
// CommonJS
module.exports=b(require("underscore"),require("backgrid"),require("moment")):
// Browser globals
b(a._,a.Backgrid,a.moment)}(this,function(a,b,c){/**
     MomentFormatter converts bi-directionally any datetime values in any format
     supported by [moment()](http://momentjs.com/docs/#/parsing/) to any
     datetime format
     [moment.fn.format()](http://momentjs.com/docs/#/displaying/format/)
     supports.

     @class Backgrid.Extension.MomentFormatter
     @extends Backgrid.CellFormatter
     @constructor
   */
var d=b.Extension.MomentFormatter=function(b){a.extend(this,this.defaults,b)},e="locale"in c&&a.isFunction(c,"locale");d.prototype=new b.CellFormatter,a.extend(d.prototype,{/**
       @cfg {Object} options

       @cfg {boolean} [options.modelInUnixOffset=false] Whether the model values
       should be read/written as the number of milliseconds since UNIX Epoch.

       @cfg {boolean} [options.modelInUnixTimestamp=false] Whether the model
       values should be read/written as the number of seconds since UNIX Epoch.

       @cfg {boolean} [options.modelInUTC=true] Whether the model values should
       be read/written in UTC mode or local mode.

       @cfg {string} [options.modelLang=moment.locale() moment>=2.8.0 |
       moment.lang() moment<2.8.0] The locale the model values should be
       read/written in.

       @cfg {string} [options.modelFormat=moment.defaultFormat] The format this
       moment formatter should use to read/write model values. Only meaningful if
       the values are strings.

       @cfg {boolean} [options.displayInUnixOffset=false] Whether the display
       values should be read/written as the number of milliseconds since UNIX
       Epoch.

       @cfg {boolean} [options.displayInUnixTimestamp=false] Whether the display
       values should be read/written as the number of seconds since UNIX Epoch.

       @cfg {boolean} [options.displayInUTC=true] Whether the display values
       should be read/written in UTC mode or local mode.

       @cfg {string} [options.displayLang=moment.locale() moment>=2.8.0 |
       moment.lang() moment<2.8.0] The locale the display values should be
       read/written in.

       @cfg {string} [options.displayFormat=moment.defaultFormat] The format
       this moment formatter should use to read/write dislay values.
     */
defaults:{modelInUnixOffset:!1,modelInUnixTimestamp:!1,modelInUTC:!0,modelLang:e?c.locale():c.lang(),modelFormat:c.defaultFormat,displayInUnixOffset:!1,displayInUnixTimestamp:!1,displayInUTC:!0,displayLang:e?c.locale():c.lang(),displayFormat:c.defaultFormat},/**
       Converts datetime values from the model for display.

       @member Backgrid.Extension.MomentFormatter
       @param {*} rawData
       @return {string}
     */
fromRaw:function(a){if(null==a)return"";var b=this.modelInUnixOffset?c(a):this.modelInUnixTimestamp?c.unix(a):this.modelInUTC?c.utc(a,this.modelFormat,this.modelLang):c(a,this.modelFormat,this.modelLang);return this.displayInUnixOffset?+b:this.displayInUnixTimestamp?b.unix():(this.displayLang&&(e?b.locale(this.displayLang):b.lang(this.displayLang)),this.displayInUTC?b.utc():b.local(),b.format(this.displayFormat))},/**
       Converts datetime values from user input to model values.

       @member Backgrid.Extension.MomentFormatter
       @param {string} formattedData
       @return {string}
     */
toRaw:function(a){var b=this.displayInUnixOffset?c(+a):this.displayInUnixTimestamp?c.unix(+a):this.displayInUTC?c.utc(a,this.displayFormat,this.displayLang):c(a,this.displayFormat,this.displayLang);if(b&&b.isValid())return this.modelInUnixOffset?+b:this.modelInUnixTimestamp?b.unix():(this.modelLang&&(e?b.locale(this.modelLang):b.lang(this.modelLang)),this.modelInUTC?b.utc():b.local(),b.format(this.modelFormat))}});/**
     Renders a datetime cell that uses a Backgrid.Extension.MomentFormatter to
     convert and validate values.

     @class Backgrid.Extension.MomentCell
     @extends Backgrid.Cell
   */
var f=b.Extension.MomentCell=b.Cell.extend({editor:b.InputCellEditor,/** @property */
className:"moment-cell",/** @property {Backgrid.CellFormatter} [formatter=Backgrid.Extension.MomentFormatter] */
formatter:d,/**
       Initializer. Accept Backgrid.Extension.MomentFormatter.options and
       Backgrid.Cell.initialize required parameters.
     */
initialize:function(b){f.__super__.initialize.apply(this,arguments);var c=d.prototype.defaults,e=a.keys(c),g=a.pick(this,e),h=a.pick(b,e);
// Priority of the options for the formatter, from highest to lowerest
// 1. MomentCell instance options
// 2. MomentCell class attributes
// 3. MomentFormatter defaults
// this.formatter will have been instantiated now
a.extend(this.formatter,c,g,h),this.editor=this.editor.extend({attributes:a.extend({},this.editor.prototype.attributes||this.editor.attributes||{},{placeholder:this.formatter.displayFormat})})}});a.extend(f.prototype,d.prototype.defaults)});